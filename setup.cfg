[metadata]
name = AIS-PARSER
summary = Python AIS_Parser
author = Madjid Taoualit
author_email = taoualitmadjid2@gmail.com
home_page = http://...
description_file = README.md
# Classificateurs tels que définis sous
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifier =
    Programming Language :: Python
    Programming Language :: Python :: 3.8
    Intended Audience :: Education
    Natural Language :: English/French
    Topic :: Scientific/Engineering

[entry_points]
# Ajoutez ici des scripts de console comme:
console_scripts = ais_parser = ais_parser.cli:main

[files]
# Ajoutez ici 'data_files', 'packages' ou 'namespace_packages'.
# Les fichiers de données supplémentaires sont définis comme des paires valeur / clé source et cible:
packages =
    ais_parser

[extras]
# Ajoutez ici des exigences supplémentaires pour des fonctionnalités supplémentaires

[test]
# options de py.tests lors de l'exécution de `tests python setup.py`
addopts = tests

[pytest]
# Options pour py.tests:
# Spécifiez les options de ligne de commande comme vous le feriez lors de l'appel direct de py.tests.
# par exemple. --cov-report html (ou xml) pour la sortie html / xml ou --junitxml junit.xml
# afin d'écrire un fichier de couverture qui peut être lu par Jenkins.
addopts =
    --cov ais_parser --cov-report html
    --verbose

[aliases]
docs = build_sphinx

[bdist_wheel]
# Utilisez cette option car le package est pur-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = docs/_build

[pbr]
# Laisser pbr exécuter sphinx-apidoc
autodoc_tree_index_modules = True
# autodoc_tree_excludes = ...
# Laisser pbr générer lui-même l'apidoc
# autodoc_index_modules = True
# autodoc_exclude_modules = ...
# Convertir les avertissements en erreurs
# warnerrors = True

[devpi:upload]
# Options pour le devpi: serveur PyPI et outil de packaging
# Les exportations VCS doivent être désactivées car nous utilisons setuptools-scm
no-vcs = 1
formats = bdist_wheel
